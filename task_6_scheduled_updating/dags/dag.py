from datetime import datetime, timedelta
from pathlib import Path

from airflow import DAG
from airflow.operators.python import PythonVirtualenvOperator

import sys

sys.path.append(str(Path(__file__).parent.parent.parent.resolve()))

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è DAG
default_args = {
    "owner": "airflow",
    "depends_on_past": False,
    "email_on_failure": False,
    "email_on_retry": False,
    "retries": 1,
    "retry_delay": timedelta(minutes=5),
}


def update_vector_db_task(project_root_path: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞.

    Args:
        project_root_path: –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
    """
    import logging
    import sys
    from datetime import datetime
    from pathlib import Path

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ Path
    project_root = Path(project_root_path)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path
    sys.path.insert(0, str(project_root))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

    from task_6_scheduled_updating.update_chroma_db import update_kb_index

    # –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
    doc_dir_path = project_root / "task_2_sample_dataset/arcanum_articles/text_output_replaced"

    # –°–æ–∑–¥–∞—ë–º –ø—É—Ç—å —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π: chroma_versions/4B/YYYY-MM-DD_hh-mm-ss
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    new_chroma_path = project_root / "task_6_scheduled_updating" / "chroma_versions" / "4B" / timestamp

    # –ü—É—Ç—å –∫ –ë–î –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    metadata_db_path = project_root / "task_6_scheduled_updating" / "metadata.db"

    logging.info(f"–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
    logging.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_dir_path}")
    logging.info(f"–ü—É—Ç—å –∫ –Ω–æ–≤–æ–π ChromaDB: {new_chroma_path}")
    logging.info(f"–ë–î –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {metadata_db_path}")

    # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    result_path = update_kb_index(
        doc_dir_path=doc_dir_path,
        new_chroma_dir_path=new_chroma_path,
        metadata_db_path=metadata_db_path,
        qwen3_suffix="4B",
    )

    logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {result_path}")
    return str(result_path)


def cleanup_old_indexes_task(project_root_path: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏.
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (—Å—Ç–∞—Ä—à–µ max_age_days).

    Args:
        project_root_path: –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
        max_age_days: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏–Ω–¥–µ–∫—Å–∞ –≤ –¥–Ω—è—Ö
    """
    import logging
    import sys
    from datetime import timedelta
    from pathlib import Path

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ Path
    project_root = Path(project_root_path)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path
    sys.path.insert(0, str(project_root))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

    from task_6_scheduled_updating.update_chroma_db import drop_old_indexes

    # –ü—É—Ç—å –∫ –ë–î –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    metadata_db_path = project_root / "task_6_scheduled_updating" / "metadata.db"

    max_age = timedelta(minutes=30)

    logging.info(f"üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ (–≤–æ–∑—Ä–∞—Å—Ç > {max_age})...")
    logging.info(f"–ë–î –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {metadata_db_path}")

    # –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
    result = drop_old_indexes(metadata_db_path=metadata_db_path, max_age=max_age)

    if result:
        logging.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {result.get('deleted_indexes', 0)}")
        return result
    else:
        logging.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ.")
        return {"deleted_indexes": 0, "deleted_dirs": []}


# –í—ã—á–∏—Å–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –æ–¥–∏–Ω —Ä–∞–∑
PROJECT_ROOT = str(Path(__file__).parent.parent.parent.resolve())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ DAG
with DAG(
    dag_id="update_kb_vector_index",
    default_args=default_args,
    description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (ChromaDB) –∫–∞–∂–¥—ã–π —á–∞—Å",
    schedule="@hourly",  # –ó–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —á–∞—Å
    start_date=datetime(2025, 1, 1),
    catchup=False,
    tags=["knowledge-base", "vector-index", "chromadb"],
) as dag:

    # –û–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    update_vector_index = PythonVirtualenvOperator(
        task_id="update_vector_db",
        python_callable=update_vector_db_task,
        op_kwargs={"project_root_path": PROJECT_ROOT},
        requirements=["chromadb>=0.4.0", "sentence-transformers>=2.2.0", "sqlalchemy>=2.0.0", "more-itertools>=10.0.0"],
        system_site_packages=True,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        python_version="3.11",  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≤–µ—Ä—Å–∏—é Python
    )

    # –û–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    cleanup_old_indexes = PythonVirtualenvOperator(
        task_id="cleanup_old_indexes",
        python_callable=cleanup_old_indexes_task,
        op_kwargs={"project_root_path": PROJECT_ROOT},
        requirements=["sqlalchemy>=2.0.0"],
        system_site_packages=True,
        python_version="3.11",
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –æ—á–∏—Å—Ç–∫–∞
    update_vector_index >> cleanup_old_indexes


if __name__ == "__main__":
    """
    –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ DAG –≤ debug-—Ä–µ–∂–∏–º–µ.
    –ù–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ Airflow –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    """
    import logging

    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

    logging.info("üß™ –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö DAG –í DEBUG-–†–ï–ñ–ò–ú–ï")
    logging.info("=" * 60)

    try:
        # –ü–µ—Ä–µ–¥–∞—ë–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ —Ñ—É–Ω–∫—Ü–∏—é
        project_root = str(Path(__file__).parent.parent.parent.resolve())

        # 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
        result = update_vector_db_task(project_root)
        logging.info("=" * 60)
        logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logging.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        # 2. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
        logging.info("\n" + "=" * 60)
        cleanup_result = cleanup_old_indexes_task(project_root, max_age_days=3)
        logging.info("=" * 60)
        logging.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logging.info(f"üóëÔ∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç: {cleanup_result}")

    except Exception as e:
        logging.error("=" * 60)
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        import traceback

        traceback.print_exc()
        raise
