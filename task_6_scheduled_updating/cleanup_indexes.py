import logging
import shutil
from datetime import datetime, timedelta
from pathlib import Path

from sqlalchemy import create_engine, select
from sqlalchemy.orm import Session

from task_6_scheduled_updating.sqla_models import Base, VectorIndexVersion


def drop_old_indexes(metadata_db_path: Path, max_age=timedelta(days=3)):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ë–î –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –∏—â–µ—Ç VectorIndex —Å—Ç–∞—Ä—à–µ max_age –æ—Ç datetime.now(), —É–¥–∞–ª—è–µ—Ç –∏—Ö –ø–∞–ø–∫–∏ c ChromaDB,
    –ø–æ—Ç–æ–º —É–¥–∞–ª—è–µ—Ç –∏–∑ –±–∞–∑—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∏—Ö VectorIndex

    Args:
        metadata_db_path: –ø—É—Ç—å –∫ –ë–î –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        max_age: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏–Ω–¥–µ–∫—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –¥–Ω—è)
    """
    logging.info("=== –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ ===")

    # 1. –û—Ç–∫—Ä—ã—Ç—å –ë–î –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    engine = create_engine(f"sqlite:///{metadata_db_path}", echo=False)
    Base.metadata.create_all(engine)
    logging.info(f"‚úÖ –ë–î –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {metadata_db_path}")

    # 2. –ù–∞–π—Ç–∏ —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –∏–Ω–¥–µ–∫—Å–∞
    cutoff_time = datetime.utcnow() - max_age
    logging.info(f"üîç –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–∞—Ä—à–µ {max_age} (–¥–æ {cutoff_time})")

    deleted_count = 0
    deleted_dirs = []

    with Session(engine) as session:
        # –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π —Å—Ç–∞—Ä—à–µ cutoff_time
        stmt = select(VectorIndexVersion).where(VectorIndexVersion.created_at < cutoff_time)
        old_versions = session.scalars(stmt).all()

        if not old_versions:
            logging.info("‚úÖ –°—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(old_versions)}")

        for version in old_versions:
            chroma_path = Path(version.path)

            # –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É ChromaDB
            if chroma_path.exists() and chroma_path.is_dir():
                try:
                    shutil.rmtree(chroma_path, ignore_errors=False)
                    logging.info(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {chroma_path}")
                    deleted_dirs.append(str(chroma_path))
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ {chroma_path}: {e}")
            else:
                logging.warning(f"‚ö†Ô∏è  –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {chroma_path}")

            # –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –ë–î (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è—Ç—Å—è –∏ DocHash)
            logging.info(
                f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ VectorIndexVersion (ID: {version.id}, "
                f"created: {version.created_at}, docs: {len(version.doc_hashes)})"
            )
            session.delete(version)
            deleted_count += 1

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        session.commit()

    logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {deleted_count}")
    logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–∞–ø–æ–∫: {len(deleted_dirs)}")
    logging.info("=== –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")

    return {"deleted_indexes": deleted_count, "deleted_dirs": deleted_dirs}
