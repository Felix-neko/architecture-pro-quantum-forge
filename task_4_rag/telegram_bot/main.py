# Generated With ChatGPT
# –°–ª–µ–≥–∫–∞ –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä—É–∫–∞–º–∏
import os
import sys
from pathlib import Path
from typing import Dict, Any

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Update, Message
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import uvicorn

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RAG —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ rag_example.py
sys.path.insert(0, str(Path(__file__).parent.parent))
from rag_example import create_rag_chain, answer_question

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
# –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–∫–µ–Ω—ã, –∫–ª—é—á–∏) –≤–Ω–µ –∫–æ–¥–∞
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")
HOST = os.getenv("HOST", "0.0.0.0")
PORT = int(os.getenv("PORT", 18000))

# === –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ===
# Bot - –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
bot = Bot(token=BOT_TOKEN)

# Dispatcher - –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π –æ—Ç Telegram (—Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–ª–±—ç–∫–∏, –∫–æ–º–∞–Ω–¥—ã)
# MemoryStorage - —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ (–Ω–∞–º —Å–≥–æ–¥–∏—Ç—Å—è: –∏—Å—Ç–æ—Ä–∏—è –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–∞)
dp = Dispatcher(storage=MemoryStorage())

# === FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = FastAPI()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG chain –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
rag_chain = None


@dp.message(F.text)
async def rag_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ RAG"""
    global rag_chain

    if not rag_chain:
        await message.answer("‚ö†Ô∏è RAG chain –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_query = message.text

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

    # –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ RAG
    result = answer_question(rag_chain, user_query)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
    response_parts = [f"<b>–ó–∞–ø—Ä–æ—Å:</b> {user_query}"]

    if result.get("think"):
        response_parts.append(f"\n<b>Thinking:</b>\n{result['think']}")

    final_answer = result.get("final_answer", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
    response_parts.append(f"\n<b>–û—Ç–≤–µ—Ç:</b> {final_answer}")

    response_text = "\n".join(response_parts)

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(response_text, parse_mode="HTML")


@app.on_event("startup")
async def on_startup():
    global rag_chain
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG chain...")
    rag_chain = create_rag_chain()
    print("RAG chain ON!")


# === Webhook endpoint ===
@app.post(WEBHOOK_PATH)
async def webhook_handler(update: Update) -> Dict[str, Any]:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram —á–µ—Ä–µ–∑ webhook –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –∏—Ö –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä"""

    # –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä aiogram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    await dp.feed_update(bot, update)

    return {"ok": True}


if __name__ == "__main__":
    uvicorn.run(app, host=HOST, port=PORT)
