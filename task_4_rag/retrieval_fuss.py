"""
RAG —á–∞—Ç-–±–æ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞ –±–∞–∑–µ Ollama + LangChain
–¢—Ä–µ–±—É–µ—Ç: pip install langchain langchain-ollama chromadb
"""

from langchain_ollama import OllamaLLM, OllamaEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain.chains import RetrievalQAWithSourcesChain
from langchain.schema import Document


def create_sample_documents():
    """–°–æ–∑–¥–∞—ë–º –ø—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    docs = [
        Document(
            page_content="–ü–∏—Ç–æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –ì–≤–∏–¥–æ –≤–∞–Ω –†–æ—Å—Å—É–º–æ–º –≤ 1991 –≥–æ–¥—É. "
            "–Ø–∑—ã–∫ –Ω–∞–∑–≤–∞–Ω –≤ —á–µ—Å—Ç—å –∫–æ–º–µ–¥–∏–π–Ω–æ–π –≥—Ä—É–ø–ø—ã Monty Python.",
            metadata={"source": "python_history.txt"},
        ),
        Document(
            page_content="Julia ‚Äî –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π. "
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ MIT, –≤–ø–µ—Ä–≤—ã–µ –≤—ã–ø—É—â–µ–Ω –≤ 2012 –≥–æ–¥—É.",
            metadata={"source": "julia_overview.txt"},
        ),
        Document(
            page_content="Zig ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. "
            "–§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç–µ, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. "
            "–°–æ–∑–¥–∞–Ω –≠–Ω–¥—Ä—é –ö–µ–ª–ª–∏.",
            metadata={"source": "zig_intro.txt"},
        ),
        Document(
            page_content="SQLite ‚Äî –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è SQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö. "
            "–≠—Ç–æ —Å–∞–º–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –°–£–ë–î –≤ –º–∏—Ä–µ. "
            "–ö–æ–¥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å—é.",
            metadata={"source": "databases.txt"},
        ),
    ]
    return docs


def setup_rag_system():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç RAG-—Å–∏—Å—Ç–µ–º—É —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º"""

    # LLM –º–æ–¥–µ–ª—å –∏–∑ Ollama –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    llm = OllamaLLM(model="qwen3:8b", temperature=0)

    # Embeddings –º–æ–¥–µ–ª—å ‚Äî –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å!
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: "mxbai-embed-large", "all-minilm"
    embeddings = OllamaEmbeddings(model="nomic-embed-text")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    documents = create_sample_documents()

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ (–∑–¥–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ)
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
    splits = text_splitter.split_documents(documents)

    # –°–æ–∑–¥–∞—ë–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    vectorstore = Chroma.from_documents(documents=splits, embedding=embeddings, collection_name="knowledge_base")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É QA —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    chain = RetrievalQAWithSourcesChain.from_chain_type(
        llm=llm,
        chain_type="stuff",  # 'stuff' –ø–æ–º–µ—â–∞–µ—Ç –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω –ø—Ä–æ–º–ø—Ç
        retriever=vectorstore.as_retriever(search_kwargs={"k": 3}),
        return_source_documents=True,
    )

    return chain


def ask_question(chain, question: str):
    """–ó–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    print(f"\n{'='*70}")
    print(f"–í–æ–ø—Ä–æ—Å: {question}")
    print("=" * 70)

    result = chain.invoke({"question": question})

    print(f"\n–û—Ç–≤–µ—Ç:\n{result['answer']}")

    if result.get("sources"):
        print(f"\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {result['sources']}")

    if result.get("source_documents"):
        print(f"\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã ({len(result['source_documents'])}):")
        for i, doc in enumerate(result["source_documents"], 1):
            print(f"\n  {i}. [{doc.metadata['source']}]")
            print(f"     {doc.page_content[:150]}...")


def main():
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã...")
    chain = setup_rag_system()

    # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    questions = [
        "–ö—Ç–æ —Å–æ–∑–¥–∞–ª —è–∑—ã–∫ Python –∏ –∫–æ–≥–¥–∞?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —è–∑—ã–∫–µ Julia",
        "–ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π?",
        "–ß—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –ø—Ä–æ SQLite?",
    ]

    for q in questions:
        ask_question(chain, q)

    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    print(f"\n\n{'='*70}")
    print("üí¨ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–≤–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    print("=" * 70)

    while True:
        question = input("\n–í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
        if question.lower() in ("exit", "quit", "–≤—ã—Ö–æ–¥"):
            break
        if question:
            ask_question(chain, question)


if __name__ == "__main__":
    main()
